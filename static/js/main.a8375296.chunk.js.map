{"version":3,"sources":["reducers/user.js","actions/actionLogin.js","reducers/wallet.js","actions/actionWallet.js","reducers/index.js","store/index.js","styledComponents/LoginStyled.js","pages/Login.js","components/Table.js","services/fetchApi.js","styledComponents/WalletStyled.js","pages/Wallet.js","middleware.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["initialState","user","email","wallet","currencies","expenses","state","action","type","payload","exchangeRates","filter","expense","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","LoginPage","styled","div","connect","dispatch","loginEmail","setLoginEmail","props","useState","setEmail","password","setPassword","validEmail","setValidEmail","isDisabled","length","handleChange","event","test","target","name","value","Form","onSubmit","e","preventDefault","history","push","Group","className","Label","htmlFor","Control","data-testid","id","placeholder","required","onChange","minLength","Button","variant","disabled","delExpenses","deleteExpenses","Table","triped","bordered","hover","size","map","rate","currency","ask","key","description","tag","method","split","Number","toFixed","onClick","fetchCurrentPrice","a","fetch","response","json","data","ok","Promise","resolve","reject","WalletStyled","Wallet","currencyOptions","bind","renderInputs","onSubmitWallet","currentPrice","this","addExpenses","allExpenses","setState","maxlength","as","coin","sumExpenses","reduce","acc","curr","React","Component","then","catch","err","saveExpenses","Routes","exact","path","component","Login","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"kSAGMA,EAAe,CACnBC,KAAM,CACJC,MAAO,IAETC,OAAQ,CACNC,WAAY,GACZC,SAAU,KAeCJ,MAXf,WAA6C,IAA/BK,EAA8B,uDAAtBN,EAAcO,EAAQ,uCAC1C,OAAQA,EAAOC,MACf,ICb6B,aDc3B,MAAO,CACLN,MAAOK,EAAOE,SAElB,QACE,OAAOH,I,eEdLN,EAAe,CACnBI,WAAY,GACZC,SAAU,IAyBGF,MAtBf,WAA+C,IAA/BG,EAA8B,uDAAtBN,EAAcO,EAAQ,uCAC5C,OAAQA,EAAOC,MACf,ICbkC,uBDchC,OAAO,2BACFF,GADL,IAEEI,cAAeH,EAAOE,UAE1B,ICjB2B,gBDkBzB,OAAO,2BACFH,GADL,IAEED,SAAS,GAAD,mBAAMC,EAAMD,UAAZ,CAAsBE,EAAOE,YAEzC,ICrB6B,kBDsB3B,OAAO,2BACFH,GADL,IAEED,SAAUC,EAAMD,SAASM,QAAO,SAACC,GAAD,OAAaA,IAAYL,EAAOE,aAEpE,QACE,OAAOH,IEjBIO,EALKC,0BAAgB,CAClCb,OACAE,WCEaY,G,MALDC,sBACZH,EACAI,8BAAoBC,0BAAgBC,Q,oqBCNtC,IA2BeC,EA3BGC,IAAOC,IAAV,KCwFf,IAWeC,cAAQ,MAXI,SAACC,GAAD,MAAe,CACxCC,WAAY,SAAChB,GAAce,ENvFA,SAACf,GAAD,MAAc,CACzCD,KAH6B,aAGNC,WMsFaiB,CAAcjB,QAUrCc,EA3Ff,SAAeI,GAAQ,IAAD,EACMC,mBAAS,IADf,mBACb1B,EADa,KACN2B,EADM,OAEYD,mBAAS,IAFrB,mBAEbE,EAFa,KAEHC,EAFG,OAGgBH,oBAAS,GAHzB,mBAGbI,EAHa,KAGDC,EAHC,KAMdC,EAAaF,GAAcF,EAASK,QADxB,EAYZC,EAAe,SAACC,GARD,eACHC,KAAKpC,GAGnB+B,GAAc,GAFdA,GAAc,GAMc,MAENI,EAAME,OAAtBC,EAFsB,EAEtBA,KAAMC,EAFgB,EAEhBA,MACL,UAATD,EAAmBX,EAASY,GAASV,EAAYU,IAGnD,OACE,kBAAC,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,SACE,SAACC,GACCA,EAAEC,iBADG,IAEGC,EAAwBnB,EAAxBmB,SACRrB,EADgCE,EAAfF,YACNvB,GACX4C,EAAQC,KAAK,eAIjB,kBAACL,EAAA,EAAKM,MAAN,CACEC,UAAU,QAEV,kBAACP,EAAA,EAAKQ,MAAN,CAAYC,QAAQ,eAApB,SAGA,kBAACT,EAAA,EAAKU,QAAN,CACEX,MAAQvC,EACRM,KAAK,QACLgC,KAAK,QACLa,cAAY,cACZC,GAAG,cACHC,YAAY,oBACZC,UAAQ,EACRC,SAAWrB,KAGf,kBAACM,EAAA,EAAKM,MAAN,KACE,kBAACN,EAAA,EAAKQ,MAAN,CAAYC,QAAQ,kBAApB,SAGA,kBAACT,EAAA,EAAKU,QAAN,CACEX,MAAQX,EACRtB,KAAK,WACLgC,KAAK,WACLa,cAAY,iBACZC,GAAG,iBACHI,UAAU,IACVF,UAAQ,EACRC,SAAWrB,KAGf,kBAACuB,EAAA,EAAD,CACEC,QAAQ,UACRpD,KAAK,SACLqD,UAAY3B,EACZoB,GAAG,aAJL,e,gCC9BR,IAWe/B,eAPS,SAACjB,GAAD,MAAY,CAClCD,SAAUC,EAAMH,OAAOE,aALE,SAACmB,GAAD,MAAe,CACxCsC,YAAa,SAACrD,GAAD,OAAae,ELpCE,SAACf,GAAD,MAAc,CAC1CD,KAX6B,kBAWNC,WKmCYsD,CAAetD,QAUrCc,EAnDf,YAAoD,IAA1BlB,EAAyB,EAAzBA,SAAUyD,EAAe,EAAfA,YAClC,OACE,kBAACE,EAAA,EAAD,CAAOC,QAAM,EAACC,UAAQ,EAACC,OAAK,EAACC,KAAK,KAAKR,QAAQ,QAC7C,+BACE,4BACE,+CACA,mCACA,sDACA,qCACA,qCACA,mDACA,gDACA,qDACA,yCAGJ,+BACGvD,EAASgE,KAAI,SAACzD,GACb,IAAM0D,EAAO1D,EAAQ6B,MAAQ7B,EAAQF,cAAcE,EAAQ2D,UAAUC,IACrE,OACE,wBAAIC,IAAM7D,EAAQ0C,IAChB,4BAAK1C,EAAQ8D,aACb,4BAAK9D,EAAQ+D,KACb,4BAAK/D,EAAQgE,QACb,4BAAKhE,EAAQ6B,OACb,4BAAK7B,EAAQF,cAAcE,EAAQ2D,UAAU/B,KAAKqC,MAAM,IAAK,IAC7D,4BAAKC,OAAOlE,EAAQF,cAAcE,EAAQ2D,UAAUC,KAAKO,QAAQ,IACjE,4BAAKT,EAAKS,QAAQ,IAClB,oCACA,4BACE,kBAAC,IAAD,CAAkBC,QAAU,kBAAMlB,EAAYlD,gB,yBC5B/CqE,EATQ,uCAAG,8BAAAC,EAAA,sEACDC,MAAM,+CADL,cAClBC,EADkB,gBAELA,EAASC,OAFJ,UAElBC,EAFkB,QAGpBF,EAASG,GAHW,yCAIfC,QAAQC,QAAQH,IAJD,gCAMjBE,QAAQE,OAAOJ,IANE,2CAAH,qD,o2BCEvB,IAkEeK,EAlEMtE,IAAOC,IAAV,KCQZsE,E,kDACJ,aAAe,IAAD,8BACZ,gBAEKtF,MAAQ,CACXgD,GAAI,EACJb,MAAO,IACPiC,YAAa,GACbH,SAAU,MACVK,OAAQ,WACRD,IAAK,oBACLkB,gBAAiB,CACf,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,QAI9C,EAAKzD,aAAe,EAAKA,aAAa0D,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,eAAiB,EAAKA,eAAeF,KAApB,gBAlBV,E,iEAuBZG,EADyBC,KAAKvE,MAAtBsE,kB,qCAIKrD,GACbA,EAAEC,kBAEFoD,EADyBC,KAAKvE,MAAtBsE,gBAFQ,MAI0CC,KAAK5F,MAAvDgD,EAJQ,EAIRA,GAAIb,EAJI,EAIJA,MAAOiC,EAJH,EAIGA,YAAaH,EAJhB,EAIgBA,SAAUK,EAJ1B,EAI0BA,OAAQD,EAJlC,EAIkCA,IAJlC,EAKuBuB,KAAKvE,MAApCwE,EALQ,EAKRA,YACFC,EAAc,CAClB9C,KACAb,QACAiC,cACAH,WACAK,SACAD,MACAjE,cAbc,EAKKA,eAUrBwF,KAAKG,SAAS,CAAE/C,GAAIA,EAAK,IACzB6C,EAAYC,GACZF,KAAKG,SAAS,CACZ5D,MAAO,IACPiC,YAAa,O,mCAIJrC,GAAQ,IAAD,EACMA,EAAME,OAAtBC,EADU,EACVA,KAAMC,EADI,EACJA,MACdyD,KAAKG,SAAL,eACG7D,EAAOC,M,qCAII,IAAD,EAQTyD,KAAK5F,MANPmC,EAFW,EAEXA,MACAiC,EAHW,EAGXA,YACAH,EAJW,EAIXA,SACAK,EALW,EAKXA,OACAD,EANW,EAMXA,IACAkB,EAPW,EAOXA,gBAGF,OACE,kBAACnD,EAAA,EAAD,CAAMC,SAAWuD,KAAKF,gBACpB,kBAACtD,EAAA,EAAKQ,MAAN,CAAYC,QAAQ,eAApB,UAGA,kBAACT,EAAA,EAAKU,QAAN,CACE5C,KAAK,SACLgC,KAAK,QACLa,cAAY,cACZI,SAAWyC,KAAK9D,aAChBK,MAAQA,IAEV,kBAACC,EAAA,EAAKQ,MAAN,CAAYC,QAAQ,qBAApB,oBAGA,kBAACT,EAAA,EAAKU,QAAN,CACE5C,KAAK,OACLgC,KAAK,cACLa,cAAY,oBACZiD,UAAU,KACV7C,SAAWyC,KAAK9D,aAChBK,MAAQiC,IAEV,kBAAChC,EAAA,EAAKQ,MAAN,CAAYC,QAAQ,kBAApB,UAGA,kBAACT,EAAA,EAAKU,QAAN,CACEmD,GAAG,SACHjD,GAAG,iBACHd,KAAK,WACLa,cAAY,iBACZI,SAAWyC,KAAK9D,aAChBK,MAAQ8B,GAEPsB,EAAgBxB,KAAI,SAACmC,GAAD,OAAU,4BAAQ/B,IAAM+B,GAAQA,OAEvD,kBAAC9D,EAAA,EAAKQ,MAAN,CAAYC,QAAQ,gBAApB,2BAGA,kBAACT,EAAA,EAAKU,QAAN,CACEmD,GAAG,SACHjD,GAAG,eACHd,KAAK,SACLa,cAAY,eACZI,SAAWyC,KAAK9D,aAChBK,MAAQmC,GAER,4CACA,2DACA,2DAEF,kBAAClC,EAAA,EAAKQ,MAAN,CAAYC,QAAQ,aAApB,QAGA,kBAACT,EAAA,EAAKU,QAAN,CACEmD,GAAG,SACHjD,GAAG,YACHd,KAAK,MACLa,cAAY,YACZI,SAAWyC,KAAK9D,aAChBK,MAAQkC,GAER,qDACA,yCACA,4CACA,8CACA,6CAEF,kBAAChB,EAAA,EAAD,CACEnD,KAAK,UADP,wB,+BASI,IACAN,EAAUgG,KAAKvE,MAAfzB,MAEFuG,EADeP,KAAKvE,MAAlBtB,SACqBqG,QAAO,SAACC,EAAKC,GAGxC,OADuBD,EADVC,EAAKnE,MAAQmE,EAAKlG,cAAckG,EAAKrC,UAAUC,MAG3D,GAEH,OACE,kBAAC,EAAD,KACE,gCACE,yBAAKnB,cAAY,eAAenD,GAChC,6BACE,0BAAMmD,cAAY,eAAlB,yBACqBoD,EAAY1B,QAAQ,GADzC,MAGA,0BAAM1B,cAAY,yBAAlB,SAGJ,6BACG6C,KAAKH,gBAER,kBAAC,EAAD,W,GAvKac,IAAMC,WA4LZvF,eAfS,SAACjB,GAAD,MAAY,CAClCJ,MAAOI,EAAML,KAAKC,MAClBQ,cAAeJ,EAAMH,OAAOO,cAC5BL,SAAUC,EAAMH,OAAOE,aAGE,SAACmB,GAAD,MAAe,CACxCyE,aAAc,kBAAMzE,GC1Lb,SAACA,GACNyD,IACG8B,MAAK,SAAC3B,GAEL5D,ETJkC,CACxChB,KALkC,uBAKNC,QSEH2E,OAElB4B,OAAM,SAACC,GACR,MAAOA,SDqLbd,YAAa,SAAC1F,GAAD,OAAae,ERvLA,SAACf,GAAD,MAAc,CACxCD,KAR2B,gBAQNC,WQsLcyG,CAAazG,QAOnCc,CAA6CqE,GEjMvCuB,E,uKAEjB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAYC,IAClC,kBAAC,IAAD,CAAOF,KAAK,YAAYC,UAAY1B,S,GALRkB,aCIrBU,MANf,WACE,OACE,kBAAC,EAAD,OCOgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUhH,MAAQA,GAChB,kBAAC,EAAD,QAGJiH,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdtB,OAAM,SAAAuB,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a8375296.chunk.js","sourcesContent":["// Esse reducer será responsável por tratar as informações da pessoa usuária\nimport { SET_LOGIN_EMAIL } from '../actions/actionLogin';\n\nconst initialState = {\n  user: {\n    email: '',\n  },\n  wallet: {\n    currencies: [],\n    expenses: [],\n  },\n};\n\nfunction user(state = initialState, action) {\n  switch (action.type) {\n  case SET_LOGIN_EMAIL:\n    return {\n      email: action.payload,\n    };\n  default:\n    return state;\n  }\n}\n\nexport default user;\n","// Coloque aqui suas actions\n\nexport const SET_LOGIN_EMAIL = 'LOGIN_INFO';\n\nexport const setLoginEmail = (payload) => ({\n  type: SET_LOGIN_EMAIL, payload,\n});\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nimport {\n  REQUEST_PRICE_SUCESS,\n  SAVE_EXPENSES,\n  DELETE_EXPENSES } from '../actions/actionWallet';\n\nconst initialState = {\n  currencies: [],\n  expenses: [],\n};\n\nfunction wallet(state = initialState, action) {\n  switch (action.type) {\n  case REQUEST_PRICE_SUCESS:\n    return {\n      ...state,\n      exchangeRates: action.payload,\n    };\n  case SAVE_EXPENSES:\n    return {\n      ...state,\n      expenses: [...state.expenses, action.payload],\n    };\n  case DELETE_EXPENSES:\n    return {\n      ...state,\n      expenses: state.expenses.filter((expense) => expense !== action.payload),\n    };\n  default:\n    return state;\n  }\n}\n\nexport default wallet;\n","export const REQUEST_PRICE_SUCESS = 'REQUEST_PRICE_SUCESS';\nexport const SAVE_EXPENSES = 'SAVE_EXPENSES';\nexport const DELETE_EXPENSES = 'DELETE_EXPENSES';\n\nexport const requestprice = (payload) => ({\n  type: REQUEST_PRICE_SUCESS, payload,\n});\n\nexport const saveExpenses = (payload) => ({\n  type: SAVE_EXPENSES, payload,\n});\n\nexport const deleteExpenses = (payload) => ({\n  type: DELETE_EXPENSES, payload,\n});\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\n\nconst rootReducer = combineReducers({\n  user,\n  wallet,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from '../reducers';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import styled from 'styled-components';\n\nconst LoginPage = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    Form {\n      height: 400px;\n      width: 400px;\n      box-shadow: 0px 1px 15px -3px #000000;\n      border-radius: 10%;\n      margin-top: 13%;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      flex-direction: column;\n      font-size: 25px;\n      text-align: center;\n      background: #454d55;\n      color: #fff;\n\n      button {\n        margin-top: 35px;\n        width: 230px;\n      }\n    }\n`;\n\nexport default LoginPage;\n","/* eslint-disable react/jsx-indent */\n/* eslint-disable max-lines-per-function */\n/* eslint-disable no-unused-expressions */\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button, Form } from 'react-bootstrap';\nimport { setLoginEmail } from '../actions/actionLogin';\nimport LoginPage from '../styledComponents/LoginStyled';\n\nfunction Login(props) {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [validEmail, setValidEmail] = useState(false);\n\n  const minLength = 6;\n  const isDisabled = validEmail && password.length >= minLength;\n\n  const isValidEmail = () => {\n    const emailRegex = /\\S+@\\S+\\.\\S+/;\n    if (!emailRegex.test(email)) {\n      setValidEmail(false);\n    } else {\n      setValidEmail(true);\n    }\n  };\n\n  const handleChange = (event) => {\n    isValidEmail();\n    const { name, value } = event.target;\n    name === 'email' ? setEmail(value) : setPassword(value);\n  };\n\n  return (\n    <LoginPage>\n      <Form\n        onSubmit={\n          (e) => {\n            e.preventDefault();\n            const { history, loginEmail } = props;\n            loginEmail(email);\n            history.push('/carteira');\n          }\n        }\n      >\n        <Form.Group\n          className=\"mb-3\"\n        >\n          <Form.Label htmlFor=\"email-input\">\n            Email\n          </Form.Label>\n          <Form.Control\n            value={ email }\n            type=\"email\"\n            name=\"email\"\n            data-testid=\"email-input\"\n            id=\"email-input\"\n            placeholder=\"alguem@alguem.com\"\n            required\n            onChange={ handleChange }\n          />\n        </Form.Group>\n        <Form.Group>\n          <Form.Label htmlFor=\"password-input\">\n            Senha\n          </Form.Label>\n          <Form.Control\n            value={ password }\n            type=\"password\"\n            name=\"password\"\n            data-testid=\"password-input\"\n            id=\"password-input\"\n            minLength=\"6\"\n            required\n            onChange={ handleChange }\n          />\n        </Form.Group>\n        <Button\n          variant=\"primary\"\n          type=\"submit\"\n          disabled={ !isDisabled }\n          id=\"login-btn\"\n        >\n          Entrar\n        </Button>\n      </Form>\n    </LoginPage>\n  );\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  loginEmail: (payload) => { dispatch(setLoginEmail(payload)); },\n});\n\nLogin.propTypes = {\n  loginEmail: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Table from 'react-bootstrap/Table';\nimport { RiDeleteBin6Line } from 'react-icons/ri';\nimport { deleteExpenses } from '../actions/actionWallet';\n\nfunction TableComponent({ expenses, delExpenses }) {\n  return (\n    <Table triped bordered hover size=\"sm\" variant=\"dark\">\n      <thead>\n        <tr>\n          <th>Descrição</th>\n          <th>Tag</th>\n          <th>Método de pagamento</th>\n          <th>Valor</th>\n          <th>Moeda</th>\n          <th>Câmbio utilizado</th>\n          <th>Valor convertido</th>\n          <th>Moeda de conversão</th>\n          <th>Excluir</th>\n        </tr>\n      </thead>\n      <tbody>\n        {expenses.map((expense) => {\n          const rate = expense.value * expense.exchangeRates[expense.currency].ask;\n          return (\n            <tr key={ expense.id }>\n              <td>{expense.description}</td>\n              <td>{expense.tag}</td>\n              <td>{expense.method}</td>\n              <td>{expense.value}</td>\n              <td>{expense.exchangeRates[expense.currency].name.split('/', 1)}</td>\n              <td>{Number(expense.exchangeRates[expense.currency].ask).toFixed(2)}</td>\n              <td>{rate.toFixed(2)}</td>\n              <td>Real</td>\n              <td>\n                <RiDeleteBin6Line onClick={ () => delExpenses(expense) } />\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </Table>\n  );\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  delExpenses: (payload) => dispatch(deleteExpenses(payload)),\n});\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\nTableComponent.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TableComponent);\n","const fetchCurrentPrice = async () => {\n  const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n  const data = await response.json();\n  if (response.ok) {\n    return Promise.resolve(data);\n  }\n  return Promise.reject(data);\n};\n\nexport default fetchCurrentPrice;\n","import styled from 'styled-components';\n\nconst WalletStyled = styled.div`\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nflex-direction: column;\ntext-align: center;\nwidth: 100%;\n\n\n\nheader {\n    display: flex;\n    align-items: center;\n    margin-top: 20px;\n    font-size: 25px;\n    width: inherit;\n\n\n    div {\n      margin: 20px;\n    }\n\n}\n\nsvg {\n  color: red;\n  height: 30px;\n  width: 30px;\n  cursor: pointer;\n  transition: transform 0.4s;\n}\n\nsvg:hover {\n  transform: scale(1.3);\n}\n\ndiv {\n  width: inherit;\n}\n\n\nform {\n  margin-top: 50px;\n  width: inherit;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: #454d55;\n  color: #fff;\n}\n\nbutton {\n  margin: 50px;\n}\n\n.form-label {\n  margin-right: 15px;\n  margin-left: 30px;\n}\n\n.form-control {\n    width: 150px;\n}\n\n`;\n\nexport default WalletStyled;\n","/* eslint-disable max-lines-per-function */\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Button, Form } from 'react-bootstrap';\nimport TableComponent from '../components/Table';\nimport { saveExpenses } from '../actions/actionWallet';\nimport RequestCurrentPriceThunk from '../middleware';\nimport WalletStyled from '../styledComponents/WalletStyled';\n\nclass Wallet extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      id: 0,\n      value: '0',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n      currencyOptions: [\n        'USD', 'CAD', 'EUR', 'GBP', 'ARS', 'BTC', 'LTC',\n        'JPY', 'CHF', 'AUD', 'CNY', 'ILS', 'ETH', 'XRP',\n      ],\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.renderInputs = this.renderInputs.bind(this);\n    this.onSubmitWallet = this.onSubmitWallet.bind(this);\n  }\n\n  componentDidMount() {\n    const { currentPrice } = this.props;\n    currentPrice();\n  }\n\n  onSubmitWallet(e) {\n    e.preventDefault();\n    const { currentPrice } = this.props;\n    currentPrice();\n    const { id, value, description, currency, method, tag } = this.state;\n    const { addExpenses, exchangeRates } = this.props;\n    const allExpenses = {\n      id,\n      value,\n      description,\n      currency,\n      method,\n      tag,\n      exchangeRates,\n    };\n    this.setState({ id: id + 1 });\n    addExpenses(allExpenses);\n    this.setState({\n      value: '0',\n      description: '',\n    });\n  }\n\n  handleChange(event) {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  renderInputs() {\n    const {\n      value,\n      description,\n      currency,\n      method,\n      tag,\n      currencyOptions,\n    } = this.state;\n\n    return (\n      <Form onSubmit={ this.onSubmitWallet }>\n        <Form.Label htmlFor=\"value-input\">\n          Valor:\n        </Form.Label>\n        <Form.Control\n          type=\"number\"\n          name=\"value\"\n          data-testid=\"value-input\"\n          onChange={ this.handleChange }\n          value={ value }\n        />\n        <Form.Label htmlFor=\"description-input\">\n          Descrição:\n        </Form.Label>\n        <Form.Control\n          type=\"text\"\n          name=\"description\"\n          data-testid=\"description-input\"\n          maxlength=\"15\"\n          onChange={ this.handleChange }\n          value={ description }\n        />\n        <Form.Label htmlFor=\"currency-input\">\n          Moeda:\n        </Form.Label>\n        <Form.Control\n          as=\"select\"\n          id=\"currency-input\"\n          name=\"currency\"\n          data-testid=\"currency-input\"\n          onChange={ this.handleChange }\n          value={ currency }\n        >\n          {currencyOptions.map((coin) => <option key={ coin }>{coin}</option>)}\n        </Form.Control>\n        <Form.Label htmlFor=\"method-input\">\n          Método de pagamento:\n        </Form.Label>\n        <Form.Control\n          as=\"select\"\n          id=\"method-input\"\n          name=\"method\"\n          data-testid=\"method-input\"\n          onChange={ this.handleChange }\n          value={ method }\n        >\n          <option>Dinheiro</option>\n          <option>Cartão de crédito</option>\n          <option>Cartão de débito</option>\n        </Form.Control>\n        <Form.Label htmlFor=\"tag-input\">\n          Tag:\n        </Form.Label>\n        <Form.Control\n          as=\"select\"\n          id=\"tag-input\"\n          name=\"tag\"\n          data-testid=\"tag-input\"\n          onChange={ this.handleChange }\n          value={ tag }\n        >\n          <option>Alimentação</option>\n          <option>Lazer</option>\n          <option>Trabalho</option>\n          <option>Transporte</option>\n          <option>Saúde</option>\n        </Form.Control>\n        <Button\n          type=\"submit\"\n        >\n          Adicionar despesa\n        </Button>\n      </Form>\n    );\n  }\n\n  render() {\n    const { email } = this.props;\n    const { expenses } = this.props;\n    const sumExpenses = expenses.reduce((acc, curr) => {\n      const rate = curr.value * curr.exchangeRates[curr.currency].ask;\n      const valueWithRate = (acc + rate);\n      return valueWithRate;\n    }, 0);\n\n    return (\n      <WalletStyled>\n        <header>\n          <div data-testid=\"email-field\">{email}</div>\n          <div>\n            <span data-testid=\"total-field\">\n              {`Despesa total: ${sumExpenses.toFixed(2)} `}\n            </span>\n            <span data-testid=\"header-currency-field\">BRL</span>\n          </div>\n        </header>\n        <div>\n          {this.renderInputs()}\n        </div>\n        <TableComponent />\n      </WalletStyled>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  exchangeRates: state.wallet.exchangeRates,\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  currentPrice: () => dispatch(RequestCurrentPriceThunk()),\n  addExpenses: (payload) => dispatch(saveExpenses(payload)),\n});\n\nWallet.propTypes = {\n  email: PropTypes.string.isRequired,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n","import fetchCurrentPrice from './services/fetchApi';\nimport { requestprice } from './actions/actionWallet';\n\nexport default function RequestCurrentPriceThunk() {\n  return (dispatch) => {\n    fetchCurrentPrice()\n      .then((response) => {\n        const currencies = response;\n        dispatch(requestprice(currencies));\n      }).catch((err) => {\n        throw (err);\n      });\n  };\n}\n","import { HashRouter, Route } from 'react-router-dom';\nimport React, { Component } from 'react';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nexport default class Routes extends Component {\n  render() {\n    return (\n      <HashRouter>\n        <Route exact path=\"/\" component={ Login } />\n        <Route path=\"/carteira\" component={ Wallet } />\n      </HashRouter>\n    );\n  }\n}\n","import React from 'react';\nimport Routes from './Routes';\n\nfunction App() {\n  return (\n    <Routes />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport store from './store/index';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}